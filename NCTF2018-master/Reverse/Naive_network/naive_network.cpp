#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>

#define input_num 2
#define output_num 1
#define hidden_num 50
#define learn_rate 0.3

double data_in[50][2], data_out[50][1];

double weig_itoh[input_num][hidden_num] = {{0.6898760197,0.0214457471,0.5055400625,0.5436013051,0.0523715095,0.4255968237,0.3839646503,0.3824611345,0.3460312687,0.7281003472,0.6891713804,0.8256381112,0.1056038200,0.9426258609,0.6463063567,3.7704371442,-0.3060360576,0.6518372391,1.7566944019,3.2258433597,0.4909897434,0.2904839953,-0.1551179904,0.1107910348,2.1140011404,0.8084798530,0.6182253480,0.5620048381,-0.4394118369,1.6329039038,-0.2608029823,-0.6053776609,-0.2748273477,6.0336194334,-0.1965850808,-0.3328118498,0.7843741291,0.1690582808,0.2195536203,0.0526287700,0.6446148400,0.5173432436,-0.0016303284,0.6335499902,-0.4019018057,0.7806477452,0.5267058404,-0.2621457691,0.5192254876,0.4536415322,},
{0.3383158577,-1.2091489891,0.3697121808,0.9839619012,-0.8633218656,0.4061433748,0.6390171123,0.5361017783,0.8988903306,0.6268143240,0.5232887334,0.5579711858,0.7620842165,0.7989778758,0.5501418264,6.8802255725,-1.5506874980,0.8473970664,2.8509527384,6.3275205754,0.7261354357,0.6459220601,-0.6929879375,0.2712980371,3.9261046186,0.4990350554,0.3700921292,0.9044142347,-0.6447647063,3.2316826963,-0.7672204318,-0.2210800974,0.3185811384,11.7556340810,0.1374479352,-0.7223023138,0.1898202295,-0.8471195733,1.5452025839,0.4117567988,0.5823134590,0.7559594532,-0.1196975655,0.5696301685,-0.3102205650,1.8790432943,1.2098870189,-0.7393743424,1.6361503062,1.2148455024,},
};
double weig_htoo[hidden_num][output_num] = {{0.2121210470,},
{-1.8045406450,},
{0.2264443504,},
{1.6025624300,},
{-1.3085037974,},
{0.1699475324,},
{0.2219680774,},
{0.2614728273,},
{1.1659834040,},
{1.2482723970,},
{0.4573407415,},
{1.1341276878,},
{0.3431822576,},
{1.8330716235,},
{0.5315674991,},
{-4.8465319832,},
{-2.2783200833,},
{1.4395344105,},
{-4.8385496688,},
{9.1270231769,},
{1.0431504395,},
{0.4199557115,},
{-1.2023186758,},
{-0.1249575385,},
{5.6411303847,},
{0.8282347584,},
{0.4080997100,},
{1.4993393105,},
{-1.7164018816,},
{4.6125087553,},
{-1.6944786494,},
{-1.1817639752,},
{-0.4468032422,},
{8.0348592352,},
{-0.3375803694,},
{-2.1076922122,},
{0.3834531262,},
{-1.2175821082,},
{1.8303188803,},
{-0.0980205808,},
{0.8836483330,},
{1.0635053765,},
{-0.5650702124,},
{0.9427863499,},
{-0.9900986793,},
{-1.6074633041,},
{-0.5365073142,},
{-1.4818262475,},
{2.2514477416,},
{-0.5802832972,},
};
double thres_out[output_num] = {4.3140948283,};
double thres_hidden[hidden_num] = {0.6667357870,0.5675888846,0.9693541680,2.2855948961,0.4244784685,0.7230212126,0.8142759496,0.9436500260,1.7407281441,1.6990615660,1.2117856810,1.7167798281,0.7920781141,2.4382132038,1.2441909137,9.8802233224,0.7345036562,2.1127075009,3.0554773076,10.3683798475,1.4891703413,1.1556378871,0.3694783672,0.5575106042,6.9381445165,1.5372957387,0.7774195330,2.1342683274,-0.2764051955,5.8089699386,-0.1832722912,0.3812498852,0.3718913456,-1.2582950752,0.9841932936,-0.5163186220,0.7648131683,0.2947270877,2.5634071996,0.4272628356,1.3963116679,1.6151824994,0.3001285138,1.3417890709,0.4207101823,1.0233209507,0.3738455415,0.1572715045,3.1332995080,0.2879062298,};

// double weig_itoh[input_num][hidden_num] = {{0.0203834227649886,0.5567129348583115,0.5459832816421648,2.8670641682790947,1.6272884380568122,0.0520294275118706,3.8072950634197547,0.3671161574590530,0.4053488722382288,-0.3469215349766785,0.2855414527399132,-0.1069868638819712,0.5326329726918183,0.3782195746093707,-5.7789606899000443,0.1764419410081796,1.2420003181388373,-0.0227468720177324,0.2365517505967192,0.0930933689835882,0.6271742977102032,1.0011727583234733,-0.1263367018194744,0.8527935084118295,-2.5631583017805348,0.5708670416203727,0.6845289221465749,0.6187891202170780,0.4709009363708662,0.2273472109555498,0.7152513166549984,0.5656659984457282,1.1706554181801876,0.3247009270410840,0.3412454936709823,1.0236795454787544,0.5314936047063088,0.2354633708374081,0.3132234671959321,0.0368787502533274,0.6094837890316018,0.5781148649538963,1.9936792757364126,0.6097185688506617,0.2179123286816157,0.5562631789978246,0.0272047215892868,0.1071887786277430,1.3478223335803614,1.9529903441811107,},
// {-0.7726602463558202,0.2211203198030514,0.0908937195959902,5.3091260778920288,3.1152609333642967,-0.2665382512346977,7.3259982762781872,0.2972550108513079,0.2487929226113673,-0.8463442888223049,0.5912572356841620,-0.6283635663221321,0.7036714941902313,0.4585745129357480,-11.6169341515924707,0.4919759826901522,2.7346920039129099,0.2084983080002990,-0.0927881063921629,-0.6992120326807115,1.0834657097979989,0.1309851879166056,-0.5656544553852044,0.0002156234804414,-1.9901398433619519,0.5262975279668336,1.2610875552779786,1.1099815077317075,0.5512976214686446,0.6312184505847465,0.1939950990678325,0.7238826249196079,2.6117217150200545,0.4820861685348111,0.4489957952548129,2.3296306526667800,0.7032997176763193,-0.1194081646526462,-1.2564946739179974,0.5903483697693700,0.7244954270570749,0.8404522214281184,3.6025972431624322,0.9503236166186330,0.4640587093491038,0.3838219107671674,-0.5782475745008010,0.4792879145652944,2.8645120543192295,3.4053452358255383,},
// };
// double weig_htoo[hidden_num][output_num] = {{-1.1617504920260404,},
// {0.8062093874075706,},
// {0.6528735560478863,},
// {-9.2437664044244414,},
// {4.1066129164028125,},
// {-0.1579019079754845,},
// {9.2338900595015900,},
// {0.8528221200836617,},
// {0.4746557413413943,},
// {-1.0900680416410180,},
// {1.2689567087298643,},
// {-1.3917491226709198,},
// {1.4311214731826676,},
// {1.1717425414278315,},
// {-9.2289957658517743,},
// {1.1039306052753004,},
// {3.4350902761700888,},
// {0.2359213535949419,},
// {-1.5751664643590650,},
// {-1.0332951363408998,},
// {1.9672412484632955,},
// {0.9414933861878189,},
// {-1.3535913610981143,},
// {0.6923067798939467,},
// {-1.5737548953853253,},
// {1.0320819181925256,},
// {2.0278808789322196,},
// {1.8804297334609179,},
// {1.5369974357737646,},
// {1.1404565527898858,},
// {0.8856612530005434,},
// {1.5067202324079700,},
// {3.3040260229020890,},
// {0.9001522029184248,},
// {0.8162186953076056,},
// {2.9588139542977192,},
// {1.5030432531410913,},
// {-1.5957126427016541,},
// {-1.3724581286789945,},
// {1.2027619805125109,},
// {1.6100417630900392,},
// {1.9621010515522745,},
// {-3.7493318945598428,},
// {1.8669295835716324,},
// {0.6587061168635495,},
// {0.8298757493386979,},
// {-0.7714434256325541,},
// {0.5780076969505087,},
// {3.8663191619711048,},
// {4.6840245502047031,},
// };
// double thres_out[output_num] = {3.0895283767022024,};
// double thres_hidden[hidden_num] = {0.7100097152983084,0.7989675336239934,0.4748954713607336,7.9386325290177977,5.7637245541022528,0.4353204579992198,12.2682387721726034,0.6587232734886976,0.7269158748143166,1.3869075586321176,1.5179996492083905,0.7316238290476498,2.2898769182223511,1.1348330748000919,1.3950144501465644,0.8899736426094951,5.0292943688473102,0.4457489195950176,0.3067212583111724,0.2614107856506661,3.0319283034390043,1.3149156610581627,-0.4307796442691222,0.8230753745595146,2.6414664120610327,1.8043449518143495,3.2733228474342848,3.0406565066120610,1.7968587325825747,1.5223818633733357,0.9635466123342118,2.3935064571653135,4.8560435936646007,1.1745762893685265,1.1050661350575064,4.4777180675052586,2.3031662639016006,0.1319581801192326,0.5738208868054071,0.9888977689948685,2.4775986823472342,2.6765236609868941,3.2751321123968626,2.8491785726207817,1.0195486313502977,1.2806832933843215,0.8263468399155376,0.6717484052282848,5.2572249114074268,6.3572555209808632,};

double input[input_num], output[output_num], hidden[hidden_num];
double real_output[output_num];

double g[output_num], e[hidden_num];

double sigmoid(double x)
{
	return 1.0 / (1.0 + exp(-x));
}

void init_nn()
{
	int fd = open("/dev/urandom", 0);
	int x = 0;
	read(fd, &x, 4);
	close(fd);
	srand(x);
	int i, j;
	for (i = 0; i < input_num; i++)
	{
		for (j = 0; j < hidden_num; j++)
		{
			weig_itoh[i][j] = rand() / 2147483648.0;
		}
	}
	for (i = 0; i < hidden_num; i++)
	{
		for (j = 0; j < output_num; j++)
		{
			weig_htoo[i][j] = rand() / 2147483648.0;
		}
	}
	for (i = 0; i < hidden_num; i++)
	{
		thres_hidden[i] = rand() / 2147483648.0;
	}
	return;
}

void forward_transfer()
{
	int i, j;
	for (i = 0; i < hidden_num; i++)
	{
		double x = 0.0;
		for (j = 0; j < input_num; j++)
		{
			x += weig_itoh[j][i] * input[j];
		}
		hidden[i] = sigmoid(x - thres_hidden[i]);
	}
	for (i = 0; i < output_num; i++)
	{
		double x = 0.0;
		for (j = 0; j < hidden_num; j++)
		{
			x += weig_htoo[j][i] * hidden[j];
		}
		output[i] = sigmoid(x - thres_out[i]);
	}
	return;
}

void train_network()
{
	forward_transfer();
	int i, j;
	for (i = 0; i < output_num; i++)
	{
		g[i] = output[i] * (1 - output[i]) * (real_output[i] - output[i]);
	}
	for (i = 0; i < hidden_num; i++)
	{
		double x = 0.0;
		for (j = 0; j < output_num; j++)
		{
			x += weig_htoo[i][j] * g[j];
		}
		e[i] = hidden[i] * (1 - hidden[i]) * x;
	}

	for (i = 0; i < output_num; i++)
	{
		for (j = 0; j < hidden_num; j++)
		{
			weig_htoo[j][i] += learn_rate * g[i] * hidden[j];
		}
		thres_out[i] -= learn_rate * g[i];
	}

	for (i = 0; i < hidden_num; i++)
	{
		for (j = 0; j < input_num; j++)
		{
			weig_itoh[j][i] += learn_rate * e[i] * input[j];
		}
		thres_hidden[i] -= learn_rate * e[i];
	}
	return;
}

void load_data(int x)
{
	int i;
	for (i = 0; i < input_num; i++)
	{
		input[i] = data_in[x][i];
	}
	for (int i = 0; i < output_num; i++)
	{
		real_output[i] = data_out[x][i];
	}
}

void training_loop()
{
	int i, j;
	for (i = 0; i < 10000; i++)
	{
		for (j = 0; j < 100000; j++)
		{
			load_data(j);
			train_network();
		}
		printf("Training Loop %d / 10000\n", i);
	}
}

double input_floats[64];

double output_floats[64];

typedef struct
{
	double x;
	double y;
} point;

//point target[20];

int seq_a[] = {5, 30, 32, 24, 13, 33, 29, 19, 9, 20, 10, 14, 6, 12, 18, 11, 0, 26, 21, 3, 2, 4, 22, 25, 8, 16, 23, 27, 17, 7, 1, 15, 31, 28};
int seq_b[] = {22, 7, 13, 15, 29, 28, 30, 32, 12, 33, 27, 25, 9, 23, 5, 11, 6, 21, 24, 0, 19, 16, 10, 17, 14, 18, 31, 26, 20, 8, 3, 4, 1, 2};

// point target[] = {{0.747193, 0.53736}, {0.717005, 0.624133}, {0.657509,
//  0.694142}, {0.57674, 0.73793}, {0.485608, 0.749585}, {0.396419,
//  0.727532}, {0.32122, 0.67475}, {0.270165, 0.598367}, {0.250151,
//  0.508698}, {0.263881, 0.417855}, {0.3095, 0.338106}, {0.380847,
//  0.280222}, {0.468286, 0.25202}, {0.560008, 0.257309}, {0.643626,
 //  0.295375}, {0.707847, 0.361076}, {0.743996, 0.44554}};
point O = {0.5, 0.5};
point P = {0.747193, 0.53736};

point target[20];

int fequal(double a, double b)
{
	return (fabs(a - b) <= 1.25e-3);
}

inline int point_equal(point a, point b)
{
	return fequal(a.x, b.x) && fequal(a.y, b.y);
}

void change_point()
{
	for (int i = 0; i < 17; i++)
	{
		target[i].x = output_floats[i * 2];
		target[i].y = output_floats[i * 2 + 1];
	}
}

double network_output(double x, double y)
{
	input[0] = x;
	input[1] = y;
	forward_transfer();
	return output[0];
}

void gen_output()
{
	for (int i = 0; i < 34; i++)
	{
		output_floats[i] = network_output(input_floats[seq_a[i]], input_floats[seq_b[i]]);
	}
}

inline double get_dis(point a, point b)
{
	return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

inline double get_cos(point p, point o, point q)
{
	double a = get_dis(p, o);
	double b = get_dis(p, q);
	double c = get_dis(o, q);
	double res = (a * a + c * c - b * b) / (2 * a * c);
	return res;
}

int check()
{
	for (int i = 0; i < 17; i++)
	{
		if (point_equal(target[i], target[(i + 1) % 17]))
		{
			return 0;
		}
	}
	if (!point_equal(target[0], P)) return 0;
	double cos_xoy = get_cos(target[0], O, target[1]);
	double cos_xcy = get_cos(target[0], target[rand() % 15 + 2], target[1]);
	if (!fequal(cos_xoy, 2 * cos_xcy * cos_xcy - 1)) return 0;
	for (int i = 1; i < 17; i++)
	{
		int idx = 0;
		do
		{
			idx = rand() % 17;
		} while (idx == i || idx == (i+1) % 17);
		if (!fequal(cos_xcy, get_cos(target[i], target[idx], target[(i+1) % 17]))) return 0;
	}
	return 1;
}

char flag[128];

void gen_flag()
{
	for (int i = 0; i < 34; i++)
	{
		snprintf(flag + i * 2, 3, "%02x", (int)(input_floats[i] * 100));
	}
}

// (a[i] + 2*a[i+1] ) / 3.0 == g[i]

int main()
{
	int seed = 0;
	int fd = open("/dev/urandom", 0);
	read(fd, &seed, 4);
	close(fd);
	srand(seed);
	puts("Input the magic numbers:");
	for (int i = 0; i < 34; i++)
	{
		scanf("%8lf", &input_floats[i]);
	}
	gen_output();
/*
0.316222
0.881297
0.309929
0.621122
0.084098
0.332510
0.217116
0.545128
0.170498
0.373272
0.094003
0.598367
0.541776
0.599381
0.617180
0.915032
0.465110
0.028979
0.145475
0.309285
0.950950
0.706972
0.954535
0.741237
0.042336
0.782708
0.112150
0.547627
0.716762
0.686573
0.521824
0.469393
0.952252
0.648903

0.316222
0.881297
0.309929
0.621122
0.084098
0.332510
0.217116
0.545128
0.169999
0.373272
0.094003
0.598367
0.541776
0.599381
0.617180
0.915032
0.465110
0.028979
0.145475
0.309285
0.950950
0.706972
0.954535
0.741237
0.042336
0.782708
0.112150
0.547627
0.716762
0.686573
0.521824
0.469393
0.952252
0.648903
*/
	printf("\n");
//	for (int i = 0; i < 34; i++)
//	{
//		printf("%.6lf\n", output_floats[i]);
//	}
	change_point();
	int res = 0;
	for (int i = 0; i < 10000; i++)
	{
		res = res + check();
	}
//d	printf("%d\n", res);
	if (res > 9930)
	{
		gen_flag();
		printf("TQL! NCTF{%s}\n", flag);
	}
	else
	{
		printf("Too young too simple!\n");
	}
}
